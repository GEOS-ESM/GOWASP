Explanation of scripts

A. Create conventional obs (i.e., all PREPBUFR data except SATWINDS): create_conv.j    
   This data should be concatenated with the output of create_amv.j using
   cat_windfiles.j to put both data types into the same .prepbufr file.

B. Create GPSRO obs: create_gpsro.j
    
C. Create SATWIND obs by running three scripts: Note that the first 2 need not
be run for the full time period to be simulated but only for a sample period
to generate the input tables for the third script.
   
(1) count_amv.j examines GSI dagnostic data in .ods files from an assim of
real data to determine "target" data counts to match in the obs simulation process.
Three output files are generated: one is a table of obs counts as functions of
data type, p-layer, latitude band, and sea/land; another is a table of counts
as functins of hemisphere, longitude, and time; and the optional third is a reformatted
set of ods data to be used to determine histograms of obs separation
distances (This is for input to compute_dx.x). 

(2) compute_amv_params.j determines the parameters required for the probability
functions that will be used to determine if cloud or ipw tracked winds will be 
simulated at NR locations. Two output files are generated: one is a file
containing parameters for the functions defining the probability of an obs
being present based on cloud or ipw fields; the optional other contains histograms of
ipw that can be used to specify the scaling of ipw ranges.
 
(3) create_amv.j will actually create a file of wind obs in .prepbufr format. 
This should be catted with the output from create_conv.j using
cat_windfiles.j. It uses results tables generated by both count_amv.j and 
compute_amv_params.j. 

D. Create radiance obs by running the three successive scripts (1)
create_rad_list.j, (2) create_rad_prof.j, (3) create_rad_bufr.j:

(1) takes obs information from an existing BUFR file, extracts the information
required by the GSI code excluding the radiances , brightness temperatures, or
quality marks, and performs a data thinning as directed by a ressource
file. This code also adds some information extracted from the NR for the obs
times and locations. Check that the output files all have the expected file
sizes. If not thinned, the size should be similar to the input BUFR files. If
thinned, they should be smaller by a factor of 4-100. Generally all output
file sizes are with 10% of each other, but if the original file is notably
smaller, the created one will also likely be.

(2) takes the thinned obs info created by (1) and extracts surface and column 
fields at their locations and times, as directed by a resource file.  The obs
information from (1) is also copied to this file of extracted field  information  
This step is very costly if the high resolution fields are read.  This script
also calls a program to reorder the information by data subtype, rather than
by time, for more efficient use by (3). The sizes of the output files should
be proportional to the sizes of corresponding input files.

(3) takes the profile and obs information produced by (2) and calls the CRTM
to produce radiances and brightness temperatures.  Output is in the form of a
BUFR file.  The user can create cloud or precip contaminated obs by either
calling the CRTM with the appropriate fields or by a simple method that
elevates the effective radiative surface.  These choices are controlled by
resource files.

An additional script create_rad_merge.j can be used if (2) is applied more
than once, i.e., if additional fields are to be added to an existing set of
profiles. For example, if cloud water and ice fields were not extracted when
(2) was run previously, (2) can be re-run just as before except with a
resource file listing only the new fields.  Then create_rad_merge.j will merge
corresponding pairs without having to repeat the I/O expense of extracting the
original field info. 

the create_rad_prof_QR.j is the same as create_rad_prof.j  except it
points to field_list_rad_QR.rc rather than field_list_rad.rc and has as
its data types only those which are treated as all_sky. It also dumps
the profiles into a diffrent dir. Aftwrads, these profiles (that have
cloud and precip profiles) should be merged with created by
create_rad_prof.j (that have QV, T, and O3 profiles) using
create_rad_merge.j before letting create_rad_bufr.j ingest them.

Only obs used for allsky need 3d cloud and precip profiles. These are best
done by running separate create_rad_prof runs for only the allsky rad types for the cloud
and precip fields, using a distinct field_list_rad.rc. Here, a distinct "_QR"
is added to the .rc file and .j scripts. Once these and the corresponding prof
files for the other fields are available, then they can be merged using
create_rad_merge.j. The new merged files can overwite the prof files for the
other fields since now the file will contain all the required fields. The file
not overwritten can then be deleted since it is no longer needed (but check
that the file sizes look right, slightly smaller than the sum of the 2
original file sizes). 
  
E. Run create_rad_bufr.j to create rad BUFR files from the saved profiles. To
make allsky rads, simply use a rad_prob.rc file that lists the cloud and
precip filelds to use. Here, there are actually two create_rad_bufr.j scripts:
one has _QR added to the file name.  It specifies its .rc file as one with the
name ..._QR... and only lists the obs types that should be allsky. The BUFR
files will have the same names for allsky or clear sky radiances, so if both
are desired they must be put in separate dirs (again here, using the name
..._QR. Also note, opptionally, .bin files of clear sky radiances ordered as
for the allsky ones can be output for use by the error code, to make the added
errors dependent on how different the allsky and clear-sky rads are
(indicative of how big the scattering effect is for this particular obs).


F. Create obs errors using create_error.j.  It reads in and outputs BUFR
files.  Currently, it has no references to the field information except as
implied by the observations. The obs errors can be correlated in various ways,
as controlled by resource files. The script check_bufr.j can be used to later 
produce statistics of the differences between the input and output BUFR files here.

G. Create obs for spin up of OSSE DAS from a start with real background rather
than NR. create_gp_raobs.j This creates a .prepbufr file of raobs simulated at
NR grid points. When used without adding obs errors, it will be sufficient to 
push the OSSE from its original restart from real data to a restart consistant
with the NR fields. 

Timings for single node jobs with NR fields every 0.5hr:
                 hr/day  hr/month
create_error     0.6     18         (10 rad types + prepbufr, satwinds, gpsro)
create_conv      1.3  |   
create_gps       1.0  |  84
create_rad_list  0.8  ||            
create_rad_prof  2.0  || 100        (10 rad types) 
create_rad_bufr  0.5  ||

total 200 hr/month for single node   

G. Scripts for creating simulated obs at real locations of satwind and
radiance observations (The latter include only channels actually assimilated).

1) create_amv_realloc.j: this will make satwind observations using
create_conv.x by providing a BUFR file of thinned and QCd AMVS taken from 
a GSI .ods output file and reformatted first as a text file and then as a BUFR
file. The BUFR file created by create_amv_realloc.j should then be cat with a
BUFR file containing the none AMV conv obs to create a PREPBUFR file.   

2) For radiances, this is controlled by a parameter $REALLOC in the scripts
create_rad_list.j and create_rad_bufr.j. These must use .ods files output by
a GSI experiment along with the corresponding BUFR files used for input to
that GSI experiment. otherwise, the observations are created by the same
sequence of scripts as for any other OSSE simulation.  
